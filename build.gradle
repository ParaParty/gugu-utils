buildscript {
    repositories {
        maven { url = "https://maven.aliyun.com/repository/public" }
        mavenCentral()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
// 只需要编辑下面的东西即可，上部的代码是 Forge 设置所添加并必须的。


// 模组的基本信息，包括版本，包名等


version = mod_version
group = 'com.warmthdawn.mod.gugu-utils' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'gugu-utils'

def build_number = getBuildNumber()
version += "." + build_number


sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = mcp_mappings

    // 将代码中的所有 @VERSION@ 字段替换为 version 变量
    replaceIn "GuGuUtils.java"
    replace "@VERSION@", project.version

    coreMod = mod_core_plugin
    clientJvmArgs += "-Dfml.coreMods.load=${mod_core_plugin}"
    serverJvmArgs += "-Dfml.coreMods.load=${mod_core_plugin}"
//    useDepAts = true
//    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}


repositories {
    maven {
        name = "blamejared"
        url = "https://maven.blamejared.com"
    }
    maven {
        name = "CoFH Maven"
        url = "https://maven.covers1624.net"
    }
    maven {
        name = "thiakil"
        url = "http://maven.thiakil.com"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { url "https://maven.hellfiredev.net" }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        name = "ChickenBones Maven"
        url = "http://chickenbones.net/maven/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven { url = "http://maven.cil.li/" }

    maven { url = "https://maven.ellpeck.de/" }
    maven {
        url "https://www.cursemaven.com"
    }

}

dependencies {
    implementation "org.jetbrains:annotations:20.1.0"


    deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}"
    deobfCompile "com.github.mcjty:mcjtylib:${mc_short}-${mcjtylib_version}"
    deobfCompile "hellfirepvp.modularmachinery:modularmachinery:${mc_version}-${modularmachinery_version}"

    deobfCompile "vazkii.botania:Botania:${botania_version}"
    deobfCompile "vazkii.psi:Psi:${psi_version}"
    deobfCompile "vazkii.autoreglib:AutoRegLib:${arl_version}"
    deobfCompile "CraftTweaker2:CraftTweaker2-MC1120-Main:${mc_short}-${crafttweaker_version}"
    deobfCompile "com.blamejared:MTLib:${mtlib_version}"
    deobfCompile "hellfirepvp.astralsorcery:astralsorcery:${mc_version}-${astralsorcery_version}"
    deobfCompile "vazkii.patchouli:Patchouli:${patchouli_version}"
    deobfCompile "de.ellpeck.naturesaura:NaturesAura:${naturesaura_version}"
    deobfCompile "me.desht.pneumaticcraft:pneumaticcraft-repressurized:${pneumaticcraft_repressurized_version}"
    deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:${theoneprobe_version}"
    deobfCompile "curse.maven:guideapi-${guideapi_version}"
    deobfCompile "curse.maven:embersrekindled-${embers_version}"
    deobfCompile "curse.maven:bloodmagic-${bloodmagic_version_curse}"
    deobfCompile "curse.maven:thaumcraft-${thaumcraft_version}"
    deobfCompile "curse.maven:mekanism-${mekanism_version}"
    deobfCompile "curse.maven:prodigytech-${prodigytech_version}"

    deobfCompile("codechicken:CodeChickenLib:${mc_version}-${ccl_version}:universal") {
        exclude group: "mezz.jei"
    }
    deobfCompile "curse.maven:computercraft-${computercraft_version}"


    runtime "com.azanor.baubles:Baubles:${mc_short}-${baubles_version}"



}



jar {
    manifest {
        attributes "FMLAT": "guug_at.cfg"
        attributes "FMLCorePluginContainsFMLMod": "true"
        attributes "ForceLoadAsMod": "true"
        attributes "FMLCorePlugin": mod_core_plugin
    }
}


//Attempt to resolve GBK errors
tasks.withType(JavaCompile) {

options.encoding = "UTF-8"

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

runClient {
    args '--username', 'WarmthDawn'
    jvmArgs '-Xms4G', '-Xmx8G'
}

def getBuildNumber() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def buildNumber = versionProps['BUILD_NUMBER'].toInteger()
        def savedVersion = versionProps['SAVED_VERSION']
        def runTasks = gradle.startParameter.taskNames        //仅在assembleRelease任务是增加版本号
        if ('build' in runTasks) {
            versionProps['BUILD_NUMBER'] = (++buildNumber).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        if (savedVersion != project.version) {
            versionProps['SAVED_VERSION'] = project.version.toString()
            versionProps['BUILD_NUMBER'] = (buildNumber = 1).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        return buildNumber
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}
